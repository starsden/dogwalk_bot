import Vapor
import TelegramVaporBot

final class DefaultBotHandlers {
    private static var userStates: [Int64: BookingState] = [:]
    private static let adminUserId: Int64 = 6627628549
    private static var bookingA: [Int64: Int64] = [:]

    static func addHandlers(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await booking(app: app, connection: connection)
        await startHandler(app: app, connection: connection)
        await SendHis(app: app, connection: connection)
    }

    private static func startHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/start", "/dog"]) { update, bot in
            guard let userId = update.message?.from?.id else { return }
            app.logger.info("\(userId) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callbackData: "time"), .init(text: "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callbackData: "moreinf")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "–ü—Ä–∏–≤–µ—Ç!üëã \n–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ—è! \n–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ —Å –≤–∞—à–∏–º —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–º –¥—Ä—É–≥–æ–º!üê∂\n\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! \n–ì–∞–≤-–ì–∞–≤!",
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })
    }

    private static func booking(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "time") { update, bot in
            guard let userId = update.callbackQuery?.from.id else { return }
            app.logger.info("User \(userId) started booking")
            userStates[userId] = .nameus
            let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ù–∞—á–Ω–µ–º!‚ù§Ô∏è\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGMessageHandler(filters: .all) { update, bot in
            guard let userId = update.message?.from?.id else { return }
            guard let text = update.message?.text else {
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞( \n–£ –º–µ–Ω—è –∂–µ –ª–∞–ø–∫–∏!üêæ")
                try await bot.sendMessage(params: params)
                app.logger.info("\(userId) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç")
                return
            }

            guard let state = userStates[userId] else { return }
            switch state {
            case .nameus:
                userStates[userId] = .dogname(userName: text)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?")
                try await bot.sendMessage(params: params)
            case .dogname(let userName):
                userStates[userId] = .dogclass(userName: userName, dogName: text)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫–æ–µ –º–∏–ª–æ–µ –∏–º—è!ü•π \n–ê –∫–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã?")
                try await bot.sendMessage(params: params)
            case .dogclass(let userName, let dogName):
                userStates[userId] = .time(userName: userName, dogName: dogName, dogClass: text)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å \(dogName)?")
                try await bot.sendMessage(params: params)
            case .time(let userName, let dogName, let dogClass):
                userStates[userId] = .loca(userName: userName, dogName: dogName, dogClass: dogClass, time: text)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ê –æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å \(dogName)?")
                try await bot.sendMessage(params: params)
            case .loca(let userName, let dogName, let dogClass, let time):
                userStates[userId] = .phnum(userName: userName, dogName: dogName, dogClass: dogClass, time: time, loca: text)
                let buttons: [[TGKeyboardButton]] = [
                    [.init(text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä", requestContact: true)]
                ]
                let keyboard: TGReplyKeyboardMarkup = .init(keyboard: buttons, oneTimeKeyboard: true)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", replyMarkup: .replyKeyboardMarkup(keyboard))
                try await bot.sendMessage(params: params)
            case .phnum(let userName, let dogName, let dogClass, let time, let loca):
                let phnum: String
                if let contact = update.message?.contact {
                    phnum = contact.phoneNumber ?? ""
                } else {
                    phnum = text
                }
                let booking = Booking(userId: userId, userName: userName, dogName: dogName, dogClass: dogClass, time: time, phnum: phnum, loca: loca)
                bookingA[userId] = adminUserId
                try await sendAdmin(booking: booking, bot: bot, app: app)

                userStates.removeValue(forKey: userId)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ù§Ô∏è \n–°–ø–∞—Å–∏–±–æ! ")
                try await bot.sendMessage(params: params)
            }
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "moreinf") { update, bot in
            guard let userId = update.callbackQuery?.from.id, let messageId = update.callbackQuery?.message?.messageId else { return }
            app.logger.info("\(userId) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            try await bot.deleteMessage(params: .init(chatId: .chat(userId), messageId: messageId))
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–í–µ—Ä–Ω—É—Ç—å—Å—è", callbackData: "goback")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ—è, –∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Ö–æ–∑—è–∏–Ω! –ó–æ–≤—É—Ç –µ–≥–æ –î–µ–Ω–∏—Å, –æ–Ω –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—Å–µ—Ö —Å–æ–±–∞–∫ –∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤—ã–≥—É–ª—è–µ—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É! \n1 —á–∞—Å –ø—Ä–æ–≥—É–ª–∫–∏ - 400 —Ä—É–±–ª–µ–π. \n–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? - @dabyt ", replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "goback") { update, bot in
            guard let userId = update.callbackQuery?.from.id, let messageId = update.callbackQuery?.message?.messageId else { return }
            try await bot.deleteMessage(params: .init(chatId: .chat(userId), messageId: messageId))
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callbackData: "time"), .init(text: "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callbackData: "moreinf")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "–ü—Ä–∏–≤–µ—Ç!üëã \n–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ—è! \n–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ —Å –≤–∞—à–∏–º —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–º –¥—Ä—É–≥–æ–º!üê∂\n\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! \n–ì–∞–≤-–ì–∞–≤!",
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "—Åancelbook") { update, bot in
            guard let adminId = update.callbackQuery?.from.id, adminId == adminUserId else { return }
            guard let userId = bookingA.first(where: { $0.value == adminUserId })?.key else { return }
            app.logger.info("–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É \(userId)")
            
            let userParams: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ì–∞–≤-–ì–∞–≤! \n–ö –º–æ–µ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∏–ª–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üò¢ \n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤: @dabyt ")
            try await bot.sendMessage(params: userParams)
            
            bookingA.removeValue(forKey: userId)
        })
    }

    private static func sendAdmin(booking: Booking, bot: TGBotPrtcl, app: Vapor.Application) async throws {
        let message = """
        –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ‚úÖ:
        \nUser id: \(booking.userId)
        –ò–º—è —Ö–æ–∑—è–∏–Ω–∞: \(booking.userName)
        –ò–º—è —Å–æ–±–∞–∫–∏: \(booking.dogName)
        –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏: \(booking.dogClass)
        –í—Ä–µ–º—è: \(booking.time)
        –ê–¥—Ä–µ—Å: \(booking.loca)
        –ö–æ–Ω—Ç–∞–∫—Ç—ã: \(booking.phnum)
        """
        app.logger.info("–ò–Ω—Ñ–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –∞–¥–º–∏–Ω—É \(booking)")
        let buttons: [[TGInlineKeyboardButton]] = [
            [.init(text: "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è‚ùå", callbackData: "—Åancelbook")]
        ]
        let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
        let params: TGSendMessageParams = .init(chatId: .chat(adminUserId), text: message, replyMarkup: .inlineKeyboardMarkup(keyboard))
        try await bot.sendMessage(params: params)

        let payload = booki(userId: booking.userId, userName: booking.userName, dogName: booking.dogName, dogClass: booking.dogClass, time: booking.time, phnum: booking.phnum, loca: booking.loca)

        try await zapis(payload: payload, app: app)
    }

    private static func zapis(payload: booki, app: Vapor.Application) async throws {
        let client = app.client
        let url = URI(string: "http://62.84.115.125:5000/book")
        
        do {
            let response = try await client.post(url, headers: ["Content-Type": "application/json"]) { req in
                try req.content.encode(payload)
            }
            app.logger.info("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä \(response.status)")
        } catch {
            app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä \(error)")
        }
    }

    private static func servhistory(userId: Int64, app: Vapor.Application) async throws -> [Booking] {
        let client = app.client
        let url = URI(string: "http://62.84.115.125:5000/history/\(userId)")
        
        do {
            let response = try await client.get(url)
            let bookings = try response.content.decode([BookingHistory].self).map {
                Booking(
                    userId: userId,
                    userName: $0.userName,
                    dogName: $0.dogName,
                    dogClass: $0.dogClass,
                    time: $0.time,
                    phnum: $0.phnum,
                    loca: $0.loca
                )
            }
            return bookings
        } catch {
            app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ \(userId): \(error)")
            throw error
        }
    }

    private static func SendHis(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/history"]) { update, bot in
            guard let userId = update.message?.from?.id else { return }
            app.logger.info("\(userId) –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")

            do {
                let bookings = try await servhistory(userId: userId, app: app)
                
                if bookings.isEmpty {
                    let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –µ–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å!)")
                    try await bot.sendMessage(params: params)
                } else {
                    var message = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n"
                    for booking in bookings {
                        message += """
                        –ò–º—è —Ö–æ–∑—è–∏–Ω–∞: \(booking.userName)
                        –ò–º—è —Å–æ–±–∞–∫–∏: \(booking.dogName)
                        –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏: \(booking.dogClass)
                        –í—Ä–µ–º—è: \(booking.time)
                        –ê–¥—Ä–µ—Å: \(booking.loca)
                        –ö–æ–Ω—Ç–∞–∫—Ç—ã: \(booking.phnum)
                        \n\n
                        """
                    }
                    let params: TGSendMessageParams = .init(chatId: .chat(userId), text: message)
                    try await bot.sendMessage(params: params)
                }
            } catch {
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! \n–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É! –ü—Ä–∏–Ω–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! ;(")
                try await bot.sendMessage(params: params)
                app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏\(userId): \(error)")
            }
        })
    }

    private struct booki: Content {
        let userId: Int64
        let userName: String
        let dogName: String
        let dogClass: String
        let time: String
        let phnum: String
        let loca: String
        
        enum CodingKeys: String, CodingKey {
            case userId = "user_id"
            case userName = "user_name"
            case dogName = "dog_name"
            case dogClass = "dog_class"
            case time
            case phnum
            case loca
        }
    }
    
    private struct BookingHistory: Content {
        let userName: String
        let dogName: String
        let dogClass: String
        let time: String
        let phnum: String
        let loca: String
        
        enum CodingKeys: String, CodingKey {
            case userName = "user_name"
            case dogName = "dog_name"
            case dogClass = "dog_class"
            case time
            case phnum
            case loca
        }
    }

}

enum BookingState {
    case nameus
    case dogname(userName: String)
    case dogclass(userName: String, dogName: String)
    case time(userName: String, dogName: String, dogClass: String)
    case loca(userName: String, dogName: String, dogClass: String, time: String)
    case phnum(userName: String, dogName: String, dogClass: String, time: String, loca: String)
}

struct Booking: Content {
    let userId: Int64
    let userName: String
    let dogName: String
    let dogClass: String
    let time: String
    let phnum: String
    let loca: String
}
