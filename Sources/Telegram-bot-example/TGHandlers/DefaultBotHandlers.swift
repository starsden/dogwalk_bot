import Vapor
import TelegramVaporBot

final class DefaultBotHandlers {
    private static var userStates: [Int64: BookingState] = [:]
    private static let adminUserId: Int64 = 6627628549
    private static var bookingA: [Int64: Int64] = [:]

    static func addHandlers(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await commandstatkHandler(app: app, connection: connection)
        await bookHandler(app: app, connection: connection)
        await startHandler(app: app, connection: connection)
    }

    private static func startHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/start", "/dog"]) { update, bot in
            guard let userId = update.message?.from?.id else { return }
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callbackData: "time"), .init(text: "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callbackData: "moreinf")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üëã \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ —Å –≤–∞—à–µ–π —Å–æ–±–∞–∫–æ–πüê∂",
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })
    }

    private static func bookHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "time") { update, bot in
            guard let userId = update.callbackQuery?.from.id else { return }
            userStates[userId] = .nameus
            let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGMessageHandler(filters: .all) { update, bot in
            guard let userId = update.message?.from?.id else { return }
            guard let state = userStates[userId] else { return }
            
            switch state {
            case .nameus:
                userStates[userId] = .dogname(userName: update.message?.text ?? "")
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É?")
                try await bot.sendMessage(params: params)
            case .dogname(let userName):
                userStates[userId] = .dogclass(userName: userName, dogName: update.message?.text ?? "")
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∞?")
                try await bot.sendMessage(params: params)
            case .dogclass(let userName, let dogName):
                userStates[userId] = .time(userName: userName, dogName: dogName, dogClass: update.message?.text ?? "")
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å \(dogName)?")
                try await bot.sendMessage(params: params)
            case .time(let userName, let dogName, let dogClass):
                userStates[userId] = .loca(userName: userName, dogName: dogName, dogClass: dogClass, time: update.message?.text ?? "")
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å \(dogName)?")
                try await bot.sendMessage(params: params)
            case .loca(let userName, let dogName, let dogClass, let time):
                userStates[userId] = .phnum(userName: userName, dogName: dogName, dogClass: dogClass, time: time, loca: update.message?.text ?? "")
                let buttons: [[TGKeyboardButton]] = [
                    [.init(text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä", requestContact: true)]
                ]
                let keyboard: TGReplyKeyboardMarkup = .init(keyboard: buttons, oneTimeKeyboard: true)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", replyMarkup: .replyKeyboardMarkup(keyboard))
                try await bot.sendMessage(params: params)
            case .phnum(let userName, let dogName, let dogClass, let time, let loca):
                let phnum: String
                if let contact = update.message?.contact {
                    phnum = contact.phoneNumber ?? ""
                } else {
                    phnum = update.message?.text ?? ""
                }
                let booking = Booking(userName: userName, dogName: dogName, dogClass: dogClass, time: time, phnum: phnum, loca: loca)
                bookingA[userId] = adminUserId
                try await sendBookingToAdmin(booking: booking, bot: bot)
                userStates.removeValue(forKey: userId)
                let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚ù§Ô∏è \n–°–ø–∞—Å–∏–±–æ!")
                try await bot.sendMessage(params: params)
            }
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "moreinf") { update, bot in
            guard let userId = update.callbackQuery?.from.id, let messageId = update.callbackQuery?.message?.messageId else { return }
            try await bot.deleteMessage(params: .init(chatId: .chat(userId), messageId: messageId))
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–í–µ—Ä–Ω—É—Ç—å—Å—è", callbackData: "goback")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId), text: "–ì—É–ª—è—é –≤—Å–µ—Ö —Å–æ–±–∞–∫, –æ—Ç –±–æ–ª—å—à–∏—Ö –¥–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö. –õ—é–±–ª—é –≤—Å–µ—Öüêï \n\n400 —Ä—É–±–ª–µ–π  - 40 –º–∏–Ω—É—Ç", replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "goback") { update, bot in
            guard let userId = update.callbackQuery?.from.id, let messageId = update.callbackQuery?.message?.messageId else { return }
            try await bot.deleteMessage(params: .init(chatId: .chat(userId), messageId: messageId))
            let buttons: [[TGInlineKeyboardButton]] = [
                [.init(text: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", callbackData: "time"), .init(text: "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callbackData: "moreinf")]
            ]
            let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
            let params: TGSendMessageParams = .init(chatId: .chat(userId),
                                                    text: "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üëã \n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ —Å –≤–∞—à–µ–π —Å–æ–±–∞–∫–æ–πüê∂",
                                                    replyMarkup: .inlineKeyboardMarkup(keyboard))
            try await bot.sendMessage(params: params)
        })

        await connection.dispatcher.add(TGCallbackQueryHandler(pattern: "—Åancelbook") { update, bot in
            guard let adminId = update.callbackQuery?.from.id, adminId == adminUserId else { return }
            guard let userId = bookingA.first(where: { $0.value == adminUserId })?.key else { return }
            
            let userParams: TGSendMessageParams = .init(chatId: .chat(userId), text: "–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üò¢ \n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤: @hahaaka ")
            try await bot.sendMessage(params: userParams)
            
            bookingA.removeValue(forKey: userId)
        })
    }

    private static func sendBookingToAdmin(booking: Booking, bot: TGBotPrtcl) async throws {
        let message = """
        –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ‚úÖ:
        \n–ò–º—è —Ö–æ–∑—è–∏–Ω–∞: \(booking.userName)
        –ò–º—è —Å–æ–±–∞–∫–∏: \(booking.dogName)
        –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏: \(booking.dogClass)
        –í—Ä–µ–º—è: \(booking.time)
        –ê–¥—Ä–µ—Å: \(booking.loca)
        –ö–æ–Ω—Ç–∞–∫—Ç—ã: \(booking.phnum)
        """
        let buttons: [[TGInlineKeyboardButton]] = [
            [.init(text: "‚ùå–û—Ç–∫–∞–∑–∞—Ç—å—Å—è‚ùå", callbackData: "—Åancelbook")]
        ]
        let keyboard: TGInlineKeyboardMarkup = .init(inlineKeyboard: buttons)
        let params: TGSendMessageParams = .init(chatId: .chat(adminUserId), text: message, replyMarkup: .inlineKeyboardMarkup(keyboard))
        try await bot.sendMessage(params: params)
        print(message)
    }

    private static func commandstatkHandler(app: Vapor.Application, connection: TGConnectionPrtcl) async {
        await connection.dispatcher.add(TGCommandHandler(commands: ["/http"]) { update, bot in
            try await update.message?.reply(text: "status 200", bot: bot)
        })
    }

enum BookingState {
    case nameus
    case dogname(userName: String)
    case dogclass(userName: String, dogName: String)
    case time(userName: String, dogName: String, dogClass: String)
    case loca(userName: String, dogName: String, dogClass: String, time: String)
    case phnum(userName: String, dogName: String, dogClass: String, time: String, loca: String)
}

struct Booking {
    let userName: String
    let dogName: String
    let dogClass: String
    let time: String
    let phnum: String
    let loca: String
}
